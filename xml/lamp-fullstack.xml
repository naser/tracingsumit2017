<?xml version="1.0" encoding="UTF-8"?>
<tmfxml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../org.eclipse.tracecompass.tmf.analysis.xml.core/src/org/eclipse/tracecompass/tmf/analysis/xml/core/module/xmlDefinition.xsd">
	
<callstack id="lttng.ust.fullcallstack.analysis">
    			
    <callstackGroup name="LAMP threads">
    		<level path="Threads/*" /> 
                <thread cpu="cpu"/>
    </callstackGroup>

    <pattern version="1" id="ca.polymtl.fullcallstack">
        <head>
            <traceType id="org.eclipse.linuxtools.lttng2.ust.tracetype" />
            <traceType id="org.eclipse.linuxtools.tmf.core.experiment.generic" />
            <label value="Multilevel LAMP callstack" />
        </head>
        
        <location id="CurrentThread">
        	<stateAttribute type="constant" value="Threads" />
		<stateAttribute type="query">
			<stateAttribute type="constant" value="#CurrentScenario" />
			<stateAttribute type="constant" value="threadID" />
		</stateAttribute>
    	</location>
	 <location id="CurrentWebThread">
        	<stateAttribute type="constant" value="Threads" />
		<stateAttribute type="query">
			<stateAttribute type="constant" value="#CurrentScenario" />
			<stateAttribute type="constant" value="phpThreadId" />
		</stateAttribute>
    	</location>
    	
    	
    	<!-- callstack process="Views/*" thread="Threads/*" callstack="callstack" / -->
	        
		<patternHandler>
		
			<!-- CONDITIONS -->
		
			<!-- Test if the current running thread is equal to the current scenario thread -->
			<test id="same_thread">
				<if>
					<condition>
						<stateValue type="eventField" value="context._vtid" forcedType="int"/>
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="threadID" />
						</stateValue>
					</condition>
				</if>
			</test>
			<!-- ACTIONS -->
	
			<!-- Actions and test for time graph view threads -->
			<action id="entering_request">
				<!-- Initialize current scenario data: component, type of thread, queries and drawing event counts -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="threadID" />
					<stateValue type="eventField" value="context._vtid" forcedType="int"/>
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="apacheUri" />
					<stateValue type="eventField" value="uri" />
				</stateChange>
			</action>

			<action id="entering_php">
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="threadID" />
					<stateValue type="eventField" value="context._vtid" forcedType="int"/>
				</stateChange>
				<!-- Initialize current scenario data: component, type of thread, queries and drawing event counts -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="phpUri" />
					<stateValue type="eventField" value="uri" />
				</stateChange>
			</action>
	
			
			<action id="push_uri">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="script" value="method.concat(' ' , uri)" scriptEngine="nashorn" stack="push">
							<stateValue id="method" type="eventField" value="method"/>
							<stateValue id="uri" type="eventField" value="uri"/>
                			</stateValue>
					 
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu"/>     
	            		</stateChange>
			</action>
			<action id="push_uri_orig">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventField" value="uri"callstack stack="push"/>     
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu"/>     
	            		</stateChange>
			</action>
	
			<action id="pop_uri">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="pop"/>     
	            		</stateChange>
			</action>
			<action id="segment_create">
					<segment>
					<segType>
					    <segName>
						<stateValue type="script" value="method.concat(' ' , uri)" scriptEngine="nashorn" >
							<stateValue id="method" type="eventField" value="method"/>
							<stateValue id="uri" type="eventField" value="uri"/>
                				</stateValue> 
					    </segName>
					</segType>
				    </segment>
			</action>
				
			
	
	
			<action id="push_event_type">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventField" value="funcname" stack="push"/>     
	            		</stateChange>
			</action>
	
			<action id="pop_event_type">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventField" value="funcname" stack="pop"/>     
	            		</stateChange>
			</action>
			<action id="push_compile">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="compile file" stack="push"/>     
	            		</stateChange>
			</action>

			<action id="push_execute">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="execute line" stack="push"/>     
	            		</stateChange>
			</action>

			<action id="push_connection">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="db connection" stack="push"/>     
	            		</stateChange>
			</action>
			<action id="push_event_name">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="push"/>     
	            		</stateChange>
			</action>
	
			<action id="pop_event_name">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="pop"/>     
	            		</stateChange>
			</action>

			<action id="push_lineno">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventField" value="lineno"  stack="push"/>     
	            		</stateChange>
			</action>
			<action id="pop_lineno">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="int" value="0"/>     
	            		</stateChange>
			</action>
			<action id="pop_all">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="pop"/>     
	            		</stateChange>
			</action>
			<action id="pop_all_orig">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack"/>
					<stateValue type="eventName" stack="pop"/>
					<!-- <stateValue type="eventName" stack="popAll"/> -->    
	            		</stateChange>
			</action>
		
			
			<action id="entering_mysql_orig">
				<!-- Initialize current scenario data: component, type of thread, queries and drawing event counts -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="threadID" />
					<stateValue type="eventField" value="thread_id" forcedType="int"/>
				</stateChange>
			</action>
			<action id="entering_mysql">
				<!-- Initialize current scenario data: component, type of thread, queries and drawing event counts -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="dbconnectionid" />
					<stateValue type="eventField" value="connection_id" forcedType="int"/>
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="phpThreadId" />
					<stateValue type="eventField" value="context._vtid" forcedType="int"/>
				</stateChange>
			</action>
			<action id="entering_mysql_2">
				<!-- Initialize current scenario data: component, type of thread, queries and drawing event counts -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="threadID" />
					<stateValue type="eventField" value="context._vtid" forcedType="int"/>
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="dbconnectionid" />
					<stateValue type="eventField" value="connection_id" forcedType="int"/>
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="phpThreadId" />
					<stateValue type="eventField" value="context._vtid" forcedType="int"/>
				</stateChange>
			</action>
			<!-- Test if the current running thread is equal to the current scenario thread -->
			<test id="same_connection">
				<if>
					<condition>
						<stateValue type="eventField" value="connection_id" forcedType="int"/>
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="dbconnectionid" />
						</stateValue>
					</condition>
				</if>
			</test>
			<test id="same_mysql_thread">
				<if>
					<condition>
						<stateValue type="eventField" value="thread_id" forcedType="int"/>
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="dbconnectionid" />
						</stateValue>
					</condition>
				</if>
			</test>
			
			<action id="push_mysql_query2">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="Threads" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="push"/>
					<!--<stateValue type="eventField" value="db" stack="push"/>-->
	            		</stateChange>
			</action>
	
			<action id="pop_mysql_query2">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="phpThreadId" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="pop"/>
					<!--<stateValue type="eventField" value="db" stack="pop"/>-->
	            		</stateChange>
			</action>
			<action id="push_mysql_query">
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentWebThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="script" value="query.replace('_start','').replace('ust_','').concat(': ',command)" scriptEngine="nashorn" stack="push">
							<stateValue id="query" type="eventName"/> 
							<stateValue id="command" type="eventField" value="command"/> 
                			</stateValue>
	            		</stateChange>
			</action>
	
			<action id="pop_mysql_query">
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentWebThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="pop"/>     
	            		</stateChange>
			</action>
			<action id="push_query">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentWebThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  --> 
					<stateValue type="script" value="query.replace('_start','').replace('ust_','')" scriptEngine="nashorn" stack="push">
							<stateValue id="query" type="eventName"/> 
                			</stateValue>
	            		</stateChange>
			</action>
			<action id="pop_query">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentWebThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventField" stack="pop"/>     
					<!--<stateValue type="eventName" stack="pop"/>   -->  
	            		</stateChange>
			</action>
			
			<fsm id="lamstack" initial="Wait_start">
				<state id="Wait_start">
					<!-- The state will stay here until we have a thread start event -->
					<transition event="ust_apache:request_entry" target="in_thread" action="entering_request:push_uri"/>
					<transition event="ust_php:request_entry" target="in_thread" action="entering_php:push_uri"/>
				</state>
				<state id="in_thread" >
					
					<!-- The state will loop on itself until the thread ends and increment the operations that happen during the execution -->
					<transition event="ust_php:request_entry" cond="same_thread" target="in_thread" action="push_uri"/>

					<transition event="ust_php:function_entry" cond="same_thread" target="in_thread" action="push_event_type"/>
					<transition event="ust_php:function_exit" cond="same_thread" target="in_thread" action="pop_event_type"/>

					<transition event="ust_php:execute_entry" cond="same_thread" target="in_thread" action="push_execute"/>
					<transition event="ust_php:execute_exit" cond="same_thread" target="in_thread" action="pop_event_name"/>

					 
					<transition event="ust_php:compile_file_entry" cond="same_thread" target="in_thread" action="push_compile"/>
					<transition event="ust_php:compile_file_exit" cond="same_thread" target="in_thread" action="pop_event_name"/>

					<transition event="ust_php:php_mysql_connect" cond="same_thread" target="in_thread" action="entering_mysql"/>
					<transition event="ust_mysql:query_start" cond="same_mysql_thread" target="in_thread" action="push_query"/>
					<transition event="ust_mysql:query_done" cond="same_mysql_thread" target="in_thread" action="pop_query"/>
					<transition event="ust_mysql:command_start" cond="same_mysql_thread" target="in_thread" action="push_mysql_query"/>
					<transition event="ust_mysql:command_done" cond="same_mysql_thread" target="in_thread" action="pop_mysql_query"/>
					<transition event="ust_php:php_mysql_close" cond="same_thread:same_connection" target="in_thread" action="" />

					<transition event="ust_php:request_exit" cond="same_thread" target="in_thread" action="pop_uri"/>	
					<transition event="ust_apache:request_exit" cond="same_thread" target="end_thread" action="pop_all"/>	
					<!--<transition event="ust_apache:request_exit" cond="same_thread" target="end_thread" action="pop_all:segment_create"/>-->
					<transition event="ust_apache:close_connection" cond="same_thread" target="end_thread" action="pop_all"/>
				</state>
				<final id="end_thread"/>
			</fsm>
			
			
	
		</patternHandler>
	</pattern>
</callstack>

</tmfxml>
